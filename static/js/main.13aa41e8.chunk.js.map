{"version":3,"sources":["pages/Home.jsx","api/ApiActions.js","data/displayFields.js","components/DetailText.jsx","utils/functions.js","components/DetailLinks.jsx","components/Detail.jsx","components/CategoryList.jsx","pages/Category.jsx","components/Navigation.jsx","registerServiceWorker.js","index.js","App.jsx"],"names":["href","apiUrl","getCategoryItems","category","fetch","getById","id","parseIdFromUrl","url","replace","categoryLabels","films","text","name","hideLabel","label","locations","links","people","species","vehicles","relatedCategories","keyword","DetailText","this","props","item","excerpt","map","currentField","string","charAt","toUpperCase","slice","toLowerCase","length","substring","key","className","Component","capitaliseString","DetailLinks","getRelatedLinks","relatedItems","urls","Array","isArray","push","forEach","a","async","data","categoryData","sessionStorage","getItem","response","json","list","JSON","parse","displayLinks","relatedLinks","state","relatedCategory","filter","displayLinkItems","items","to","title","isLoaded","categories","relatedItem","setState","Detail","toggleModal","routeProps","history","prevState","modal","bind","getCategoryDetails","obj","Object","getOwnPropertyNames","match","params","Modal","isOpen","autoFocus","ModalHeader","toggle","ModalBody","CategoryList","displayJumbotron","Jumbotron","displayCard","detailsLink","Col","xs","md","lg","Card","CardTitle","CardText","tag","currentItem","Row","keys","path","render","Category","currentCategory","listItems","fetchCategoryItems","prevProps","sessionData","reduce","setItem","stringify","console","error","routeList","Navigation","toggleNavbar","collapsed","Navbar","light","NavbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","navItem","NavItem","activeClassName","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","Container","fluid","exact","component","Home","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.13aa41e8.chunk.js","sourcesContent":["/* eslint-disable react/jsx-one-expression-per-line */\r\nimport React from 'react';\r\n\r\nexport default () => {\r\n  return (\r\n    <div>\r\n      <p>\r\n        Created using <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>,{' '}\r\n        <a href=\"https://reactstrap.github.io/\">Reactstrap</a> and the{' '}\r\n        <a href=\"https://ghibliapi.herokuapp.com/\">Studio Ghibli API</a> this displays a list of\r\n        films, characters, vechicles, species, and locations that appear in Studio Ghibli`s many\r\n        films. Navigate through the categories using the links above\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n","const apiUrl = 'https://ghibliapi.herokuapp.com/';\r\nconst categoryLinks = {\r\n  films: false,\r\n  people: ['films', 'species'],\r\n  locations: ['residents', 'films'],\r\n  species: ['people', 'films'],\r\n  vehicles: ['pilot', 'films'],\r\n};\r\n\r\n/**\r\n * Makes a GET request to the Ghibli API\r\n * to get all items in the category\r\n *\r\n * @param {string} category\r\n */\r\nexport function getCategoryItems(category) {\r\n  return fetch(apiUrl + category);\r\n}\r\n\r\n/**\r\n * Call API by id\r\n *\r\n * @param {string} category\r\n * @param {int64} id\r\n */\r\nexport function getById(category, id) {\r\n  return fetch(`${apiUrl}${category}/${id}`);\r\n}\r\n\r\nexport function isEmpty(obj) {\r\n  if (typeof obj !== 'object') return false;\r\n\r\n  if (Object.getOwnPropertyNames(obj).length === 0) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function parseIdFromUrl(url, category) {\r\n  if (category) {\r\n    return url.replace(`${apiUrl + category}/`, '');\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n *\r\n * @param {*} item\r\n * @param {*} mainCategory\r\n */\r\nexport function getAllRelated(item, mainCategory) {\r\n  const relatedCategories = categoryLinks[mainCategory];\r\n  const promiseArray = [];\r\n  relatedCategories.forEach(relatedCategory => {\r\n    const urls = item[relatedCategory];\r\n    if (typeof urls === 'string') {\r\n      promiseArray.push(fetch(urls));\r\n    } else {\r\n      urls.forEach(url => {\r\n        promiseArray.push(fetch(url));\r\n      });\r\n    }\r\n  });\r\n\r\n  return fetch(promiseArray);\r\n}\r\n","export const categoryLabels = {\r\n  films: {\r\n    text: [\r\n      { name: 'description', hideLabel: true },\r\n      { name: 'director' },\r\n      { name: 'producer' },\r\n      { name: 'release_date', label: 'Release Date' },\r\n      { name: 'rt_score', label: 'Rotten Tomatoes Score' },\r\n    ],\r\n  },\r\n  locations: {\r\n    text: [\r\n      { name: 'climate' },\r\n      { name: 'terrain' },\r\n      { name: 'surface_water', label: 'Surface Water' },\r\n    ],\r\n    links: ['residents', 'films'],\r\n  },\r\n  people: {\r\n    text: [\r\n      { name: 'gender' },\r\n      { name: 'age' },\r\n      { name: 'eye_color', label: 'Eye Color' },\r\n      { name: 'hair_color', label: 'Hair color' },\r\n    ],\r\n    links: ['film', 'species'],\r\n  },\r\n  species: {\r\n    text: [\r\n      { name: 'eye_colors', label: 'Eye Colors' },\r\n      { name: 'hair_colors', label: 'Hair Colors' },\r\n    ],\r\n    links: ['people', 'films'],\r\n  },\r\n  vehicles: {\r\n    text: [\r\n      { name: 'description', hideLabel: true },\r\n      { name: 'vehicle_class', label: 'Vehicle Class' },\r\n      { name: 'length' },\r\n    ],\r\n  },\r\n};\r\n\r\nexport const relatedCategories = {\r\n  films: [\r\n    { category: 'people', label: 'Characters' },\r\n    { category: 'species' },\r\n    { category: 'locations' },\r\n    { category: 'vehicles' },\r\n  ],\r\n  people: [\r\n    { category: 'films', label: 'Appears in' },\r\n    { category: 'species', label: 'Species' },\r\n  ],\r\n  locations: [\r\n    { category: 'people', label: 'Residents', keyword: 'residents' },\r\n    { category: 'films', label: 'Appears In' },\r\n  ],\r\n  species: [\r\n    { category: 'people', label: 'Members' },\r\n    { category: 'films', label: 'Appears in' },\r\n  ],\r\n  vehicles: [\r\n    { category: 'people', label: 'Pilots' },\r\n    { category: 'films', label: 'Appears in' },\r\n  ],\r\n};\r\n","/* eslint-disable react/prop-types */\r\n/* eslint-disable react/jsx-one-expression-per-line */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { categoryLabels } from '../data/displayFields';\r\n\r\nexport default class DetailText extends Component {\r\n  render() {\r\n    const { category, item, excerpt } = this.props;\r\n    const field = categoryLabels[category];\r\n    let label = '';\r\n\r\n    return field.text.map(currentField => {\r\n      if (currentField.label) {\r\n        label = currentField.label;\r\n      } else if (!currentField.hideLabel) {\r\n        const string =\r\n          currentField.name.charAt(0).toUpperCase() + currentField.name.slice(1).toLowerCase();\r\n        label = string;\r\n      }\r\n\r\n      let text = item[currentField.name];\r\n\r\n      if (text && text.length > 300 && excerpt) {\r\n        text = `${text.substring(0, 300)}...`;\r\n      }\r\n\r\n      return (\r\n        <p key={currentField.name}>\r\n          {!currentField.hideLabel && <span className=\"label\">{label}: </span>}\r\n          {text}\r\n        </p>\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nDetailText.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n  item: PropTypes.shape({\r\n    description: PropTypes.string,\r\n  }).isRequired,\r\n  excerpt: PropTypes.bool.isRequired,\r\n};\r\n","export const capitaliseString = string => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n};\r\n","/* eslint-disable react/prop-types */\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { parseIdFromUrl, getById } from '../api/ApiActions';\r\nimport { relatedCategories } from '../data/displayFields';\r\nimport { capitaliseString } from '../utils/functions';\r\n\r\nexport default class DetailLinks extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoaded: false,\r\n      relatedLinks: {},\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { category } = this.props;\r\n    const categories = relatedCategories[category];\r\n    const links = {};\r\n\r\n    if (categories.length) {\r\n      categories.forEach(relatedItem => {\r\n        const keyword = relatedItem.keyword || relatedItem.category;\r\n        links[relatedItem.category] = this.getRelatedLinks(relatedItem.category, keyword);\r\n      });\r\n    }\r\n\r\n    this.setState({ isLoaded: true, relatedLinks: links });\r\n  }\r\n\r\n  getRelatedLinks = (category, keyword) => {\r\n    const { item } = this.props;\r\n    const relatedItems = [];\r\n    let urls = [];\r\n\r\n    if (item[keyword] && !Array.isArray(item[keyword])) {\r\n      urls.push(item[keyword]);\r\n    } else {\r\n      urls = item[keyword];\r\n    }\r\n\r\n    if (urls) {\r\n      urls.forEach(async url => {\r\n        const id = parseIdFromUrl(url, category);\r\n\r\n        if (id && id.length) {\r\n          let data = {};\r\n          const categoryData = sessionStorage.getItem(category);\r\n\r\n          if (categoryData === null) {\r\n            const response = await getById(category, id);\r\n            data = await response.json();\r\n          } else {\r\n            const list = JSON.parse(categoryData);\r\n            data = list[id];\r\n          }\r\n\r\n          relatedItems.push(data);\r\n        }\r\n      });\r\n    }\r\n\r\n    return relatedItems;\r\n  };\r\n\r\n  displayLinks = () => {\r\n    const { category } = this.props;\r\n    const { relatedLinks } = this.state;\r\n    const relatedCategory = relatedCategories[category];\r\n\r\n    if (relatedCategory.length) {\r\n      return relatedCategory\r\n        .filter(item => relatedLinks[item.category].length)\r\n        .map(item => {\r\n          const label = item.label ? item.label : capitaliseString(item.category);\r\n\r\n          return (\r\n            <div key={label}>\r\n              <h4>{label}</h4>\r\n              <ul>{this.displayLinkItems(relatedLinks[item.category], item.category)}</ul>\r\n            </div>\r\n          );\r\n        });\r\n    }\r\n\r\n    return <p>None</p>;\r\n  };\r\n\r\n  displayLinkItems = (items, category) => {\r\n    return items.map(item => {\r\n      return (\r\n        <li key={item.id}>\r\n          <Link to={`/c/${category}/${item.id}`}>{item.title || item.name}</Link>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isLoaded } = this.state;\r\n    return (\r\n      <div>\r\n        <h3>Related Links</h3>\r\n        {isLoaded ? this.displayLinks() : 'Loading...'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap';\r\n\r\nimport { getById, isEmpty } from '../api/ApiActions';\r\nimport DetailText from './DetailText';\r\nimport DetailLinks from './DetailLinks';\r\n\r\nexport default class Detail extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      item: {},\r\n      modal: false,\r\n    };\r\n\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCategoryDetails();\r\n  }\r\n\r\n  async getCategoryDetails() {\r\n    const { category, item, routeProps } = this.props;\r\n    let data = {};\r\n\r\n    if (isEmpty(item)) {\r\n      const { id } = routeProps.match.params;\r\n      const categoryData = sessionStorage.getItem(category);\r\n\r\n      if (categoryData === null) {\r\n        const response = await getById(category, id);\r\n        data = await response.json();\r\n      } else {\r\n        const list = JSON.parse(categoryData);\r\n        data = list[id];\r\n      }\r\n    } else {\r\n      data = item;\r\n    }\r\n\r\n    this.setState({\r\n      item: data,\r\n      modal: true,\r\n    });\r\n  }\r\n\r\n  toggleModal = () => {\r\n    const { category, routeProps } = this.props;\r\n    const url = `/c/${category}`;\r\n\r\n    routeProps.history.push(url);\r\n\r\n    this.setState(prevState => {\r\n      return { modal: !prevState.modal };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { category } = this.props;\r\n    const { item, modal } = this.state;\r\n    return (\r\n      <div>\r\n        <Modal isOpen={modal} autoFocus={false}>\r\n          <ModalHeader toggle={this.toggleModal}>{item.title || item.name}</ModalHeader>\r\n          <ModalBody>\r\n            <DetailText item={item} category={category} excerpt={false} />\r\n            <DetailLinks item={item} category={category} />\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nDetail.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n  item: PropTypes.shape({\r\n    description: PropTypes.string,\r\n  }).isRequired,\r\n  routeProps: PropTypes.shape({\r\n    history: PropTypes.shape({\r\n      push: PropTypes.func,\r\n    }),\r\n    match: PropTypes.shape({\r\n      params: PropTypes.shape({\r\n        id: PropTypes.string,\r\n      }),\r\n    }),\r\n  }).isRequired,\r\n};\r\n","/* eslint-disable react/forbid-prop-types */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Row, Col, Jumbotron, Card, CardTitle, CardText } from 'reactstrap';\r\nimport { Link, Route } from 'react-router-dom';\r\n\r\nimport Detail from './Detail';\r\nimport CategoryText from './DetailText';\r\nimport { capitaliseString } from '../utils/functions';\r\n\r\nexport default class CategoryList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentItem: {},\r\n    };\r\n  }\r\n\r\n  displayJumbotron = category => {\r\n    const title = capitaliseString(category);\r\n    return (\r\n      <Jumbotron>\r\n        <h1>{title}</h1>\r\n      </Jumbotron>\r\n    );\r\n  };\r\n\r\n  displayCard = item => {\r\n    const { category } = this.props;\r\n    const detailsLink = `/c/${category}/${item.id}`;\r\n\r\n    return (\r\n      <Col xs=\"12\" md=\"6\" lg=\"4\" key={item.id}>\r\n        <Card className=\"h-100 card-body\">\r\n          <CardTitle>\r\n            <h2>{item.name || item.title}</h2>\r\n          </CardTitle>\r\n          <CardText tag=\"div\">\r\n            <CategoryText item={item} category={category} excerpt />\r\n          </CardText>\r\n          <Link to={detailsLink}>More Info</Link>\r\n        </Card>\r\n      </Col>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { category, list, url } = this.props;\r\n    const { currentItem } = this.state;\r\n\r\n    return (\r\n      <div className=\"list-wrapper\">\r\n        {this.displayJumbotron(category)}\r\n        <Row className=\"category-list\">\r\n          {Object.keys(list).map(key => {\r\n            return this.displayCard(list[key]);\r\n          })}\r\n        </Row>\r\n        <Route\r\n          path={`${url}/:id`}\r\n          render={routeProps => (\r\n            <Detail routeProps={routeProps} item={currentItem} category={category} />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCategoryList.propTypes = {\r\n  category: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired,\r\n  list: PropTypes.object.isRequired,\r\n};\r\n","/* eslint-disable class-methods-use-this */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getCategoryItems } from '../api/ApiActions';\r\n\r\nimport CategoryList from '../components/CategoryList';\r\nimport { categoryLabels } from '../data/displayFields';\r\n\r\nexport default class Category extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      currentCategory: '',\r\n      isLoaded: false,\r\n      listItems: {},\r\n    };\r\n\r\n    this.fetchCategoryItems = this.fetchCategoryItems.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { match } = this.props;\r\n    const { category } = match.params;\r\n\r\n    this.fetchCategoryItems(category);\r\n  }\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    const { category } = props.match.params;\r\n    if (category !== state.currentCategory) return { isLoaded: false };\r\n\r\n    return { isLoaded: true };\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    const { match } = this.props;\r\n    if (prevProps.match.params.category !== match.params.category) {\r\n      this.fetchCategoryItems(match.params.category);\r\n    }\r\n  }\r\n\r\n  async fetchCategoryItems(category) {\r\n    if (categoryLabels[category]) {\r\n      const sessionData = sessionStorage.getItem(category);\r\n      let data = {};\r\n\r\n      if (sessionData === null) {\r\n        try {\r\n          let response = await getCategoryItems(category);\r\n          response = await response.json();\r\n\r\n          data = response.reduce((obj, item) => {\r\n            const temp = obj;\r\n            temp[item.id] = item;\r\n            return obj;\r\n          }, {});\r\n\r\n          sessionStorage.setItem(category, JSON.stringify(data));\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n      } else {\r\n        data = JSON.parse(sessionData);\r\n      }\r\n\r\n      this.setState({\r\n        isLoaded: true,\r\n        listItems: data,\r\n        currentCategory: category,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { match } = this.props;\r\n    const { currentCategory, isLoaded, listItems } = this.state;\r\n\r\n    if (!isLoaded) {\r\n      return <p>loading...</p>;\r\n    }\r\n\r\n    if (Object.keys(listItems).length === 0) {\r\n      return <div>Invalid Category</div>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <CategoryList category={currentCategory} list={listItems} url={match.url} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCategory.propTypes = {\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      category: PropTypes.string,\r\n    }),\r\n    url: PropTypes.string,\r\n  }).isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavbarToggler, Collapse } from 'reactstrap';\r\n\r\nconst routeList = [\r\n  { url: 'films', label: 'Films' },\r\n  { url: 'locations', label: 'Locations' },\r\n  { url: 'people', label: 'People' },\r\n  { url: 'species', label: 'Species' },\r\n  { url: 'vehicles', label: 'Vehicles' },\r\n];\r\n\r\nexport default class Navigation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggleNavbar = this.toggleNavbar.bind(this);\r\n    this.state = {\r\n      collapsed: true,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Hide or show the header navigation.\r\n   */\r\n  toggleNavbar = () => {\r\n    this.setState(prevState => {\r\n      return { collapsed: !prevState.collapsed };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { collapsed } = this.state;\r\n\r\n    return (\r\n      <Navbar className=\"navbar-expand-lg\" light>\r\n        <NavbarBrand tag=\"div\">\r\n          <NavLink to=\"/\">Ghibli React App</NavLink>\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\r\n        <Collapse isOpen={!collapsed} navbar>\r\n          <Nav>\r\n            {routeList.map(navItem => (\r\n              <NavItem key={navItem.label}>\r\n                <NavLink to={`/c/${navItem.url}`} activeClassName=\"active\" className=\"nav-link\">\r\n                  {navItem.label}\r\n                </NavLink>\r\n              </NavItem>\r\n            ))}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n","import React from 'react';\nimport { Container } from 'reactstrap';\nimport { HashRouter, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Category from './pages/Category';\nimport Navigation from './components/Navigation';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.css';\n\nexport default () => (\n  <HashRouter>\n    <Container fluid>\n      <Navigation />\n      <Container>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/c/:category\" component={Category} />\n      </Container>\n    </Container>\n  </HashRouter>\n);\n"],"sourceRoot":""}